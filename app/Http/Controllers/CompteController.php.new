<?php

namespace App\Http\Controllers;

use App\Models\Compte;
use App\Models\Client;
use App\Traits\ApiResponseTrait;
use App\Http\Requests\Compte\ListComptesRequest;
use App\Services\CompteService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class CompteController extends Controller
{
    use ApiResponseTrait;

    // ... autres méthodes existantes ...

    /**
     * @OA\Get(
     *   path="/monteiro.daisa/v1/clients/{clientId}/comptes",
     *   summary="Lister les comptes d'un client (création si aucun)",
     *   tags={"Comptes"},
     *   @OA\Parameter(
     *     name="clientId",
     *     in="path",
     *     required=true,
     *     @OA\Schema(type="string", format="uuid")
     *   ),
     *   @OA\Parameter(name="page", in="query", required=false, @OA\Schema(type="integer", default=1)),
     *   @OA\Parameter(name="per_page", in="query", required=false, @OA\Schema(type="integer", default=10, maximum=100)),
     *   @OA\Response(
     *     response=200,
     *     description="Liste paginée des comptes du client",
     *     @OA\JsonContent(
     *       @OA\Property(property="success", type="boolean", example=true),
     *       @OA\Property(property="data", type="array", @OA\Items(ref="#/components/schemas/Compte")),
     *       @OA\Property(property="pagination", type="object",
     *         @OA\Property(property="current_page", type="integer"),
     *         @OA\Property(property="last_page", type="integer"),
     *         @OA\Property(property="per_page", type="integer"),
     *         @OA\Property(property="total", type="integer"),
     *         @OA\Property(property="next_page_url", type="string", nullable=true),
     *         @OA\Property(property="prev_page_url", type="string", nullable=true)
     *       )
     *     )
     *   )
     * )
     */
    public function byClient(Request $request, string $clientId)
    {
        try {
            $perPage = min($request->input('per_page', 10), 100); // Maximum 100 éléments par page
            $page = max(1, $request->input('page', 1));

            $client = Client::find($clientId);
            if (!$client) {
                return $this->errorResponse('Client introuvable', 404);
            }

            // Vérifier si le client a des comptes
            $hasComptes = $client->comptes()->exists();

            // Si aucun compte, en créer un par défaut selon la règle exprimée
            if (!$hasComptes) {
                $compte = Compte::create([
                    'client_id' => $client->id,
                    'titulaire' => $client->prenom . ' ' . $client->nom,
                    'type' => 'epargne',
                    'devise' => 'FCFA',
                    'statut' => 'actif',
                    'metadata' => ['version' => 1],
                ]);
                // Retourner directement le compte créé (sans pagination puisqu'il n'y en a qu'un)
                return $this->successResponse([$this->formatCompteData($compte)]);
            }

            // Récupération paginée des comptes
            $paginator = $client->comptes()->paginate($perPage, ['*'], 'page', $page);

            // Formatage de la réponse
            $data = $paginator->map(fn($c) => $this->formatCompteData($c));

            $response = [
                'success' => true,
                'data' => $data,
                'pagination' => [
                    'current_page' => $paginator->currentPage(),
                    'last_page' => $paginator->lastPage(),
                    'per_page' => $paginator->perPage(),
                    'total' => $paginator->total(),
                    'next_page_url' => $paginator->nextPageUrl(),
                    'prev_page_url' => $paginator->previousPageUrl(),
                ]
            ];

            return response()->json($response);
        } catch (\Throwable $e) {
            Log::error('Comptes.byClient error: '.$e->getMessage(), ['trace' => $e->getTraceAsString()]);
            return $this->errorResponse('Erreur interne du serveur', 500);
        }
    }

    // ... autres méthodes existantes ...
}
